package javase.exception;

/**
 * <p>
 *
 * @author liyazhou1
 * @date 2018/12/16
 */
public class ExceptionDemo {

    /*

        异常：是在运行时期发生的不正常情况。。
        在java中用类的形式对不正常情况进行了描述和封装对象。

        描述不正常的情况的类，就称为异常类。
        以前正常流程代码和问题处理代码相结合，
        现在将正常流程代码和问题处理代码分离。提高阅读性.
        其实异常就是java通过面向对象的思想将问题封装成了对象.
        用异常类对其进行描述。

        不同的问题用不同的类进行具体的描述。 比如角标越界。空指针等等。

        问题很多，意味着描述的类也很多，
        将其共性进行向上抽取，形成了异常体系。

        最终问题（不正常情况）就分成了两大类。
        Throwable:无论是error，还是异常，问题，问题发生就应该可以抛出，让调用者知道并处理。
                    //该体系的特点就在于Throwable及其所有的子类都具有可抛性。
                    可抛性到底指的是什么呢？怎么体现可抛性呢？
                    其实是通过两个关键字来体现的。
                    throws throw ,凡是可以被这两个关键字所操作的类和对象都具备可抛性.
            |--1，一般不可处理的。Error
                    特点：是由jvm抛出的严重性的问题。
                         这种问题发生一般不针对性处理。直接修改程序
            |--2，可以处理的。Exception

        该体系的特点：
            子类使用其父类名作为后缀，阅读性很强。


        NullPointerException
        ArrayIndexOutOfBoundsException




        异常的分类：
        1，编译时被检测异常:只要是Exception和其子类都是，除了特殊子类RuntimeException体系。
                这种问题一旦出现，希望在编译时就进行检测，让这种问题有对应的处理方式。
                这样的问题都可以针对性的处理。
        2，编译时不检测异常(运行时异常):就是Exception中的RuntimeException和其子类。
                这种问题的发生，无法让功能继续，运算无法进行，更多是因为调用者的原因导致的而或者引发了内部状态的改变导致的。
                那么这种问题一般不处理，直接编译通过，在运行时，让调用者调用时的程序强制停止,让调用者对代码进行修正。

        所以自定义异常时，要么继承Exception。要么继承RuntimeException。

        throws 和throw的区别。
        1，throws使用在函数上。
           throw使用在函数内。
        2，throws抛出的是异常类，可以抛出多个，用逗号隔开。
           throw抛出的是异常对象。



        try catch finally 代码块组合特点：
        1，try catch finally
        2, try catch(多个)当没有必要资源需要释放时，可以不用定义finally。
        3, try finally 异常无法直接catch处理，但是资源需要关闭。



        异常的注意事项：
        1，子类在覆盖父类方法时，父类的方法如果抛出了异常，
        那么子类的方法只能抛出父类的异常或者该异常的子类。

        2，如果父类抛出多个异常，那么子类只能抛出父类异常的子集。


        简单说：子类覆盖父类只能抛出父类的异常或者子类或者子集。
        注意：如果父类的方法没有抛出异常，那么子类覆盖时绝对不能抛，就只能try .


     */

}
